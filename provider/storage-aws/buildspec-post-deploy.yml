# Copyright Â© Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 0.2

phases:
  install:
    runtime-versions:
      java: openjdk8
    commands:
      - echo Entered the install phase...
      - apt-get update -y
      - apt-get install -y maven
      - java -version
      - mvn clean # .m2 is not created until the first Maven command
      - cp ./provider/storage-aws/maven/settings.xml /root/.m2/settings.xml # copy the AWS-specific settings.xml to the CodeBuild instance's .m2 folder
      - cat /root/.m2/settings.xml
      - java -version
      - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      - echo $JAVA_HOME
      - mvn -version
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2& # start the Docker Daemon
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done" # wait for Docker to be ready before proceeding to the build steps
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_REGION) # authenticate with ECR via the AWS CLI
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME # build and store the ECR repo URI
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}') # generate a version tag from the commit hash for the Docker image
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) # get the commit hash
  build:
    commands:
      - echo os-storage Java build started on `date`...
      - java -version
      - export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      - mvn -version
      - echo Setting environment variables from CloudFormation Exports... # use the AWS CLI commands to query for the CloudFormation export values created in the previous step and set the required environment variables
      - echo Environment - $ENVIRONMENT
      - echo SchemaCacheName - $SCHEMA_CACHE_NAME
      - echo AWSRegion - $AWS_REGION
      - export CACHE_CLUSTER_SCHEMA_ENDPOINT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$SCHEMA_CACHE_NAME-RedisEndpointAddress'].[Value]" --output text --region $AWS_REGION)
      - export CACHE_CLUSTER_SCHEMA_PORT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$SCHEMA_CACHE_NAME-RedisEndpointPort'].[Value]" --output text --region $AWS_REGION)
      - export CACHE_CLUSTER_GROUP_ENDPOINT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$GROUP_CACHE_NAME-RedisEndpointAddress'].[Value]" --output text --region $AWS_REGION)
      - export CACHE_CLUSTER_GROUP_PORT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$GROUP_CACHE_NAME-RedisEndpointPort'].[Value]" --output text --region $AWS_REGION)
      - export CACHE_CLUSTER_LEGALTAG_ENDPOINT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$LEGALTAG_CACHE_NAME-RedisEndpointAddress'].[Value]" --output text --region $AWS_REGION)
      - export CACHE_CLUSTER_LEGALTAG_PORT=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$LEGALTAG_CACHE_NAME-RedisEndpointPort'].[Value]" --output text --region $AWS_REGION)
      - export SNS_TOPIC_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-OSDUStorageSNSTopic'].[Value]" --output text --region $AWS_REGION)
      - export S3_DATA_BUCKET=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-S3BucketDataStorage'].[Value]" --output text --region $AWS_REGION)
      - echo ...finished setting environment variables!
      - echo All environment variables
      - printenv
      - mvn clean test -pl storage-core,provider/storage-aws -Ddeployment.environment=$ENVIRONMENT -Dazure.devops.token=$VSTS_FEED_TOKEN -Dazure.devops.username=$VSTS_FEED_USER -DaltSnapshotDeploymentRepository=snapshot::default::file:../../local-snapshots-dir -DaltReleaseDeploymentRepository=release::default::file:../../local-release-dir -DaltDeploymentRepository=release::default::file:../../local-release-dir -DCACHE_CLUSTER_SCHEMA_ENDPOINT=$CACHE_CLUSTER_SCHEMA_ENDPOINT -DCACHE_CLUSTER_SCHEMA_PORT=$CACHE_CLUSTER_SCHEMA_PORT -DCACHE_CLUSTER_GROUP_ENDPOINT=$CACHE_CLUSTER_GROUP_ENDPOINT -DCACHE_CLUSTER_GROUP_PORT=$CACHE_CLUSTER_GROUP_PORT -DCACHE_CLUSTER_LEGALTAG_ENDPOINT=$CACHE_CLUSTER_LEGALTAG_ENDPOINT -DCACHE_CLUSTER_LEGALTAG_PORT=$CACHE_CLUSTER_LEGALTAG_PORT -DSNS_TOPIC_NAME=$SNS_TOPIC_NAME -DS3_DATA_BUCKET=$S3_DATA_BUCKET -DAWS_ACCOUNT_ID=$AWS_ACCOUNT_ID -DAWS_REGION=$AWS_REGION
      - echo ...os-storage Java build completed on `date`.
      - echo os-storage beginning packaging to jar...
      - mvn clean deploy -pl storage-core,provider/storage-aws -Ddeployment.environment=$ENVIRONMENT -Dazure.devops.token=$VSTS_FEED_TOKEN -Dazure.devops.username=$VSTS_FEED_USER -DaltSnapshotDeploymentRepository=snapshot::default::file:../../local-snapshots-dir -DaltReleaseDeploymentRepository=release::default::file:../../local-release-dir -DaltDeploymentRepository=release::default::file:../../local-release-dir
      - echo os-storage Docker image build started on `date`...
      - docker build -f provider/storage-aws/Dockerfile -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - echo ...os-storage Docker image build completed on `date`.
      - echo Pushing the Docker image to ECR...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Docker image pushed to ECR successfully!
      - ECS_CLUSTER_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$APPLICATION_NAME-EcsClusterName'].[Value]" --output text --region $AWS_REGION)
      - ECS_SERVICE_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='$ENVIRONMENT-$APPLICATION_NAME-EcsServiceName'].[Value]" --output text --region $AWS_REGION)
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment # force a new deployment with the updated image

cache:
  paths:
    - '/root/.m2/**/*'

artifacts:
  files:
    - '**/*'

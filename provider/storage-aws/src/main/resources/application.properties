# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#      http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

LOG_PREFIX=storage

AUTHORIZE_API=${ENTITLEMENTS_BASE_URL}/api/entitlements/v2
LEGALTAG_API=${LEGALTAG_BASE_URL}/api/legal/v1

CRS_API=${CRS_CONVERSION_BASE_URL}/api/crs/converter/v3

server.servlet.contextPath=/api/storage/v2/
logging.level.org.springframework.web=${LOG_LEVEL:INFO}
server.port=${APPLICATION_PORT:8080}

#Shared configuration
aws.region=${AWS_REGION}
aws.osduInstanceName=${OSDU_INSTANCE_NAME}

## AWS DynamoDB configuration

#Tenant specific table configuration
aws.dynamodb.schemaRepositoryTable.ssm.relativePath=${SCHEMA_REPOSITORY_SSM_RELATIVE_PATH:services/core/storage/SchemaRepositoryTable}
aws.dynamodb.recordMetadataTable.ssm.relativePath=${RECORD_METADATA_SSM_RELATIVE_PATH:services/core/storage/RecordMetadataTable}
aws.dynamodb.legalTagTable.ssm.relativePath=${LEGAL_TAG_SSM_RELATIVE_PATH:services/core/storage/LegalTagTable}
aws.dynamodb.replayStatusTable.ssm.relativePath=${REPLAY_REPOSITORY_SSM_RELATIVE_PATH:services/core/storage/ReplayStatusTable}

# AWS user agent variables
aws.disableUserAgent=${DISABLE_USER_AGENT}
aws.osduVersion=${OSDU_VERSION}

## AWS S3 configuration

aws.s3.max-record-threads=2000

aws.worker-threads=${WORKER_THREADS:1000}

#Tenant Specific S3 Bucket Configuration
aws.s3.recordsBucket.ssm.relativePath=${RECORDS_BUCKET_SSM_RELATIVE_PATH:services/core/storage/s3DataBucket}

server.ssl.enabled=${SSL_ENABLED:true}
server.ssl.key-store-type=PKCS12
server.ssl.key-store=${SSL_KEY_STORE_PATH:/certs/osduonaws.p12}
server.ssl.key-alias=${SSL_KEY_ALIAS:osduonaws}
server.ssl.key-password=${SSL_KEY_PASSWORD:}
server.ssl.key-store-password=${SSL_KEY_STORE_PASSWORD:}


# Policy service properties
service.policy.enabled=true
POLICY_API=${POLICY_BASE_URL}/api/policy/v1
POLICY_ID=storage
PARTITION_API=${PARTITION_BASE_URL}/api/partition/v1
opa.opa-endpoint=${OPA_URL}

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration
# https://community.opengroup.org/osdu/platform/system/storage/-/issues/122
osdu.spring.config.enableEncodedSpecialCharacters=true

## AWS ElastiCache configuration
aws.elasticache.cluster.endpoint=${CACHE_CLUSTER_ENDPOINT:null}
aws.elasticache.cluster.port=${CACHE_CLUSTER_PORT:null}
aws.elasticache.cluster.key=${CACHE_CLUSTER_KEY:null}

OSDU_TOPIC=${OSDU_STORAGE_TOPIC:records-changed}
OSDU_TOPIC_V2=${OSDU_STORAGE_TOPIC_V2:records-changed-v2}
REPLAY_TOPIC=${REPLAY_TOPIC:replay-records}
REINDEX_TOPIC=${REINDEX_TOPIC:reindex-records}
RECORDS_TOPIC=${OSDU_STORAGE_TOPIC:records-change}

# AWS SQS configuration
aws.sqs.replay-queue-url=${REPLAY_QUEUE_URL}
aws.sqs.polling-interval-ms=1000

# Replay operation routing properties
replay.operation.routingProperties = { \
  reindex : { topic : '${REINDEX_TOPIC_ARN}', queryBatchSize : '5000', publisherBatchSize : '50'}, \
  replay: { topic : '${OSDU_STORAGE_TOPIC}', queryBatchSize : '5000', publisherBatchSize : '50'} \
}

# Replay routing properties
replay.routingProperties = { topic : '${REPLAY_TOPIC_ARN}' }

# Swagger properties for Replay API
replayApi.getReplayStatus.summary=Get the status of a replay operation
replayApi.getReplayStatus.description=Returns the current status of a replay operation, including overall progress and kind-specific details
replayApi.triggerReplay.summary=Trigger a new replay operation
replayApi.triggerReplay.description=Initiates a new replay operation to publish record change messages for the specified kinds or all kinds

# only valid value now is "dynamo"
repository.implementation=${STORAGE_SERVICE_REPOSITORY_IMPLEMENTATION:dynamodb}

#Tomcat limits
server.tomcat.threads.max=${TOMCAT_THREADS_MAX:300}

#Collaboration context feature flag name : properties specific
collaborations-enabled=${COLLABORATION_FF_ENABLED:true}

featureFlag.strategy=appProperty
featureFlag.opa.enabled=${OPA_ENABLED:false}
feature.replay.enabled=true

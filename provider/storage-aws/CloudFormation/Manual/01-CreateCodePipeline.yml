# Copyright Â© Amazon Web Services
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09

Description: >
  This CloudFormation script creates the deployment pipeline for OSDU's storage service. The CodePipeline
  should automatically trigger whenever commits are made on the tracked branch. The start and end
  of the CodePipeline should trigger a SNS alert to keep track of when the deployment has started
  and when it finishes.

Parameters:
  Environment:
    Description: Environment Name. Defaults to 'dev'. Can only be dev/uat/prod.
    Type: String
    AllowedValues:
      - dev
      - uat
      - prod
    Default: dev

  DeploymentRegion:
    Description: The AWS region to deploy the application to. The default is us-east-1.
    Type: String
    Default: us-east-1

  SNSNotificationEmail:
    Description: The email address to send SNS notifications about the build to.
    Type: String
    Default: barclay.walsh@parivedasolutions.com

  CodeCommitRepositoryName:
    Description: The name of the Code Commit Repository that the CodePipeline source is connected to.
    Type: String
    Default: os-storage

  CodeCommitBranchName:
    Description: The name of the Code Commit branch that the CodePipeline source is connected to.
    Type: String
    Default: dev

  MasterStackName:
    Description: The name of the master stack that is being deployed by the CodePipeline.
    Type: String
    Default: os-storage-master-stack

  MasterTemplateName:
    Description: The name of the master template that is called when creating the master stack.
    Type: String
    Default: provider/storage-aws/CloudFormation/Master/os-storage-master.yml

  GroupCacheName:
    Description: The name of the cache cluster for the group cache. Needs to match the value in the environment params JSON. Will be prefixed with the environment name.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_-]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, -, and _ accepted. Max. length 64 characters.
    Default: storagegroupcache

  LegalTagCacheName:
    Description: The name of the cache cluster for the legal tag cache. Needs to match the value in the environment params JSON. Will be prefixed with the environment name.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_-]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, -, and _ accepted. Max. length 64 characters.
    Default: storagelegaltagcache

  SchemaCacheName:
    Description: The name of the cache cluster for the schema cache. Needs to match the value in the environment params JSON. Will be prefixed with the environment name.
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "^[a-zA-Z]+[0-9a-zA-Z_-]*$"
    ConstraintDescription: Must start with a letter. Only numbers, letters, -, and _ accepted. Max. length 64 characters.
    Default: storageschemacache

Resources:
  S3BucketCloudFormation:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${Environment}-os-storage-cloudformation-scripts

  CloudFormationS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketCloudFormation
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${S3BucketCloudFormation}
              - !Sub arn:aws:s3:::${S3BucketCloudFormation}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt [CodeBuildRole,Arn]
                - !GetAtt [PipelineRole,Arn]
                - !GetAtt [CFNRole,Arn]

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled

  ArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${ArtifactStoreBucket}
              - !Sub arn:aws:s3:::${ArtifactStoreBucket}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt [CodeBuildRole,Arn]
                - !GetAtt [PipelineRole,Arn]
                - !GetAtt [CFNRole,Arn]

  CachingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CachingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CachingBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${CachingBucket}
              - !Sub arn:aws:s3:::${CachingBucket}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt [CodeBuildRole,Arn]
                - !GetAtt [PipelineRole,Arn]
                - !GetAtt [CFNRole,Arn]

  SNSCodePipelineDeploymentFailed:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref SNSNotificationEmail
          Protocol: email
      TopicName: !Sub '${Environment}-OS-Storage-Deployment-CodePipeline-Failed'

  EventRuleCodePipelineFailed:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggered whenever the CodePipeline deployment stage has failed.
      EventPattern:
        source:
          - "aws.codepipeline"
        detail-type:
          - "CodePipeline Stage Execution State Change"
        detail:
          state:
            - "FAILED"
          pipeline:
            - !Sub '${Environment}-OS-Storage-Resources-CodePipeline'

      Name: !Sub ${Environment}-CodePipelineEventRule-${CodeCommitRepositoryName}
      Targets:
        -
          Arn:
            !Ref SNSCodePipelineDeploymentFailed
          Id: "Deployment-CodePipeline-Failed"
          InputTransformer:
            InputPathsMap:
              pipeline : "$.detail.pipeline"
            InputTemplate: '"The Pipeline <pipeline> has failed."'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref ArtifactStoreBucket
        Type: S3
      Name: !Sub '${Environment}-OSDU-OS-Storage-CodePipeline'
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                BranchName: !Ref CodeCommitBranchName
                RepositoryName: !Ref CodeCommitRepositoryName
              OutputArtifacts:
                - Name: Source
              RunOrder: '1'

        - Name: Pre-Deployment-CodeBuild
          Actions:
            - Name: Pre-Deployment-CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Pre-Deployment-CodeBuild
              Configuration:
                ProjectName: !Ref PreDeploymentCodeBuild
              RunOrder: '2'

        - Name: Deployment
          Actions:
            - Name: CloudFormation-Deployment-Master
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: Source
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt [ CFNRole, Arn ]
                StackName: !Sub ${Environment}-${MasterStackName}
                TemplatePath: !Sub "Source::${MasterTemplateName}"
                TemplateConfiguration: !Sub "Source::provider/storage-aws/CloudFormation/Params/${Environment}.template_configuration.json"
              RunOrder: '3'

        - Name: Post-Deployment-CodeBuild
          Actions:
            - Name: Post-Deployment-CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Post-Deployment-CodeBuild
              Configuration:
                ProjectName: !Ref PostDeploymentCodeBuild
              RunOrder: '4'

  PreDeploymentCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Environment}-pre-deployment-codebuild-${CodeCommitRepositoryName}
      Description: CodeBuild commands which run prior to the CloudFormation deployment.
      ServiceRole:
        Fn::GetAtt: [ CodeBuildRole, Arn ]
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreBucket
        Name: !Sub ${Environment}-pre-deployment-codebuild
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: AWS_REGION
            Type: PLAINTEXT
            Value: !Ref DeploymentRegion
          - Name: CFN_S3_BUCKET
            Type: PLAINTEXT
            Value: !Sub ${Environment}-os-storage-cloudformation-scripts
        PrivilegedMode: false
      Source:
        BuildSpec: ./provider/storage-aws/buildspec-pre-deploy.yml
        Location: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}
        Type: CODECOMMIT
      TimeoutInMinutes: 15

  PostDeploymentCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Environment}-post-deployment-codebuild-${CodeCommitRepositoryName}
      Description: CodeBuild commands which run after the CloudFormation deployment.
      ServiceRole:
        Fn::GetAtt: [ CodeBuildRole, Arn ]
      Artifacts:
        Type: S3
        Location: !Ref ArtifactStoreBucket
        Name: !Sub ${Environment}-post-deployment-codebuild
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: ENVIRONMENT
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: AWS_ACCOUNT_ID
            Type: PLAINTEXT
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Type: PLAINTEXT
            Value: !Ref DeploymentRegion
          - Name: VSTS_FEED_USER
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:dev-VSTSFeedToken:SecretString:vsts_feed_user}}'
          - Name: VSTS_FEED_TOKEN
            Type: PLAINTEXT
            Value: '{{resolve:secretsmanager:dev-VSTSFeedToken:SecretString:vsts_feed_token}}'
          - Name: IMAGE_REPO_NAME
            Type: PLAINTEXT
            Value: !Sub ${Environment}-${CodeCommitRepositoryName}-repository
          - Name: IMAGE_TAG
            Type: PLAINTEXT
            Value: latest
          - Name: SCHEMA_CACHE_NAME
            Type: PLAINTEXT
            Value: !Ref SchemaCacheName
          - Name: GROUP_CACHE_NAME
            Type: PLAINTEXT
            Value: !Ref GroupCacheName
          - Name: LEGALTAG_CACHE_NAME
            Type: PLAINTEXT
            Value: !Ref LegalTagCacheName
          - Name: APPLICATION_NAME
            Type: PLAINTEXT
            Value: !Ref CodeCommitRepositoryName
        PrivilegedMode: true
      Source:
        BuildSpec: ./provider/storage-aws/buildspec-post-deploy.yml
        Location: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepositoryName}
        Type: CODECOMMIT
      Cache:
        Type: S3
        Location: !Sub ${CachingBucket}/${Environment}
      TimeoutInMinutes: 15
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${Environment}-OSDU-CodeBuildSecurityGroup"
        Subnets:
          - Fn::ImportValue:
              !Sub "${Environment}-OSDU-PrivateSubnet-AZ1"
          - Fn::ImportValue:
              !Sub "${Environment}-OSDU-PrivateSubnet-AZ2"
        VpcId:
          Fn::ImportValue:
            !Sub "${Environment}-OSDU-VPC"

  MavenRepoS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${Environment}-osdu-maven-repository

  MavenRepoS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MavenRepoS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${MavenRepoS3Bucket}
              - !Sub arn:aws:s3:::${MavenRepoS3Bucket}/*
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !GetAtt [CodeBuildRole,Arn]
                - !GetAtt [PipelineRole,Arn]
                - !GetAtt [CFNRole,Arn]

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: !Sub CloudFormationRole-${CodeCommitRepositoryName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - 's3:*'
                  - 'ec2:*'
                  - 'apigateway:*'
                  - 'cloudwatch:*'
                  - 'events:*'
                  - 'logs:*'
                  - 'xray:*'
                  - 'lambda:*'
                  - 'rds:*'
                  - 'codepipeline:*'
                  - 'codecommit:*'
                  - 'cloudformation:*'
                  - 'dynamodb:*'
                  - 'application-autoscaling:*'
                  - 'autoscaling:*'
                  - 'states:*'
                  - 'iam:CreateUser'
                  - 'iam:UpdateUser'
                  - 'iam:DeleteUser'
                  - 'iam:CreateAccessKey'
                  - 'iam:UpdateAccessKey'
                  - 'iam:DeleteAccessKey'
                  - 'iam:Delete*'
                  - "iam:List*"
                  - "iam:Get*"
                  - "iam:CreateServiceSpecificCredential"
                  - "iam:DeactivateMFADevice"
                  - "iam:GenerateServiceLastAccessedDetails"
                  - "iam:UpdateOpenIDConnectProviderThumbprint"
                  - "iam:PutRolePolicy"
                  - "iam:PutUserPolicy"
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:SimulateCustomPolicy"
                  - "iam:UploadSSHPublicKey"
                  - "iam:UpdateServiceSpecificCredential"
                  - "iam:RemoveClientIDFromOpenIDConnectProvider"
                  - "iam:UpdateRoleDescription"
                  - "iam:UpdateServerCertificate"
                  - "iam:CreateInstanceProfile"
                  - "iam:GenerateCredentialReport"
                  - "iam:UntagRole"
                  - "iam:PutRolePermissionsBoundary"
                  - "iam:TagRole"
                  - "iam:ResetServiceSpecificCredential"
                  - "iam:PassRole"
                  - "iam:EnableMFADevice"
                  - "iam:ResyncMFADevice"
                  - "iam:UpdateSAMLProvider"
                  - "iam:CreatePolicy"
                  - "iam:CreateServiceLinkedRole"
                  - "iam:UpdateRole"
                  - "iam:AddClientIDToOpenIDConnectProvider"
                  - "iam:SetDefaultPolicyVersion"
                  - "iam:UpdateAssumeRolePolicy"
                  - "iam:RemoveRoleFromInstanceProfile"
                  - "iam:CreateRole"
                  - "iam:AttachRolePolicy"
                  - "iam:CreateLoginProfile"
                  - "iam:DetachRolePolicy"
                  - "iam:AttachUserPolicy"
                  - "iam:DetachUserPolicy"
                  - "iam:SimulatePrincipalPolicy"
                  - "iam:CreateAccountAlias"
                  - "iam:ChangePassword"
                  - "iam:UpdateLoginProfile"
                  - "iam:UpdateAccessKey"
                  - "iam:UpdateSSHPublicKey"
                  - "iam:UpdateAccountPasswordPolicy"
                  - "iam:CreateSAMLProvider"
                  - "iam:CreateVirtualMFADevice"
                  - "iam:CreateAccessKey"
                  - "iam:AddUserToGroup"
                  - "iam:RemoveUserFromGroup"
                  - "iam:CreatePolicyVersion"
                  - "iam:UploadSigningCertificate"
                  - "iam:TagUser"
                  - "iam:CreateOpenIDConnectProvider"
                  - "iam:UploadServerCertificate"
                  - "iam:UntagUser"
                  - "iam:UpdateSigningCertificate"
                  - 'sns:*'
                  - 'sqs:*'
                  - 'secretsmanager:*'
                  - 'acm:*'
                  - 'kms:*'
                  - 'cloudfront:*'
                  - 'route53:*'
                  - 'route53domains:*'
                  - 'elasticache:*'
                  - 'ecr:*'
                  - 'codedeploy:*'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'servicediscovery:CreatePrivateDnsNamespace'
                  - 'servicediscovery:CreateService'
                  - 'servicediscovery:GetNamespace'
                  - 'servicediscovery:GetOperation'
                  - 'servicediscovery:GetService'
                  - 'servicediscovery:ListNamespaces'
                  - 'servicediscovery:ListServices'
                  - 'servicediscovery:UpdateService'
                  - 'servicediscovery:DeleteService'
                Effect: Allow
                Resource: '*'

  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CodeBuildRole-${CodeCommitRepositoryName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /service-role/
      Policies:
        -
          PolicyName: !Sub CodeBuildNestedCFNAccessPolicy-${CodeCommitRepositoryName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:Get*"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                Resource:
                  - '*'
              -
                Effect: "Allow"
                Action:
                  - "codebuild:StartBuild"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*
              -
                Effect: "Allow"
                Action:
                  - "codecommit:ListBranches"
                  - "codecommit:ListRepositories"
                  - "codecommit:BatchGetRepositories"
                  - "codecommit:Get*"
                  - "codecommit:GitPull"
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepositoryName}
              -
                Effect: "Allow"
                Action:
                  - "ec2:*"
                  - "cloudformation:ValidateTemplate"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "iam:Get*"
                  - "iam:List*"
                  - "logs:Describe*"
                  - "logs:Get*"
                  - "tag:Get*"
                  - "ecr:*"
                  - "codedeploy:*"
                  - "ecs:*"
                Resource:
                  - "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:GetBucketPolicy"
                Resource: '*'
              -
                Effect: "Allow"
                Action:
                  - "lambda:UpdateFunctionCode"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:PublishLayerVersion"
                  - "lambda:GetLayerVersion"
                Resource: '*'
              -
                Effect: "Allow"
                Action:
                  - "apigateway:GET"
                  - "apigateway:POST"
                Resource: '*'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: !Sub CodePipelineAccess-${CodeCommitRepositoryName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:*'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                  - 'iam:PassRole'
                  - 'sns:Publish'
                  - 'lambda:ListFunctions'
                  - 'lambda:InvokeFunction'
                  - 'ec2:Describe*'
                  - 'ec2:Get*'
                  - 'ec2:Search*'
                  - 'ec2:*Vpc*'
                  - 'ec2:*Gateway'
                  - 'ec2:*Tags'
                  - 'ec2:*Subnet*'
                  - 'ec2:*Route*'
                  - 'ec2:*SecurityGroup'
                  - 'ec2:allocate*'
                  - 'ec2:release*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadStatus'
                  - 'codecommit:UploadArchive'
                Effect: Allow
                Resource: '*'
              -
                Effect: "Allow"
                Action:
                  - "codebuild:*"
                Resource:
                  - Fn::Sub: arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*

Outputs:
  CodeBuildRoleArn:
    Description: The ARN of the role used by the CodeBuild projects.
    Value: !GetAtt CodeBuildRole.Arn
    Export:
      Name: !Sub ${Environment}-${CodeCommitRepositoryName}-CodeBuildRoleArn

  CFNRoleArn:
    Description: The ARN of the role used by CloudFormation templates run from the automated pipeline.
    Value: !GetAtt CFNRole.Arn
    Export:
      Name: !Sub ${Environment}-${CodeCommitRepositoryName}-CFNRoleArn

  PipelineRoleArn:
    Description: The ARN of the role used by the application's CodePipeline.
    Value: !GetAtt PipelineRole.Arn
    Export:
      Name: !Sub ${Environment}-${CodeCommitRepositoryName}-PipelineRoleArn

openapi: 3.0.1
info:
  title: Storage Service
  description: Storage service which handles the metadata ingestion in the OSDU data platform
  contact:
    name: OSDU Data Platform Team
    email: dps@OSDU.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
  - url: /api/storage/v2/
security:
  - Authorization: []
tags:
  - name: query
    description: Querying Records operations
  - name: health-check-api
    description: Health Check API
  - name: records
    description: Records management operations
  - name: info
    description: Version info endpoint
paths:
  /records:
    put:
      tags:
        - records
      summary: Create or Update Records
      description: |-
        The API represents the main injection mechanism into the Data Ecosystem. 
        It allows records creation and/or update.When no record id is provided or when the provided id is not already present in the Data Ecosystem then a new record is created. 
         If the id is related to an existing record in the Data Ecosystem then an update operation takes place and a new version of the record is created.
      operationId: createOrUpdateRecords
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: skipdupes
          in: query
          description: Skip duplicates when updating records with the same value.
          required: false
          schema:
            type: boolean
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              maxItems: 500
              minItems: 0
              type: array
              description: Records to be created/updated
              items:
                $ref: '#/components/schemas/Record'
        required: true
      responses:
        '201':
          description: Records created and/or updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUpdateRecordsResponse'
        '400':
          description: Invalid record format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Invalid acl group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
    patch:
      tags:
        - records
      summary: Modify record data and/or metadata attributes using patch operations
      description: |-
        The API represents the patch update mechanism for records. It allows updating multiple records in one request. The API supports metadata update only (Legal Tags, ACLs and Tags) if the request body media type is `application/json`. The API supports metadata and data update (Legal Tags, ACLs, Tags, Ancestry, Kind, Meta and Data) if the request body media type is `application/json-patch+json`. Please choose the appropriate media type from the Request body dropdown. The currently supported operations are replace, add, and remove. 
        Required roles: `users.datalake.editors` or `users.datalake.admins`.
      operationId: updateRecordsMetadata_1
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecordBulkUpdateParam'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchRecordsRequestModel'
        required: true
      responses:
        '200':
          description: Records updated successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatchRecordsResponse'
                  - $ref: '#/components/schemas/BulkUpdateRecordsResponse'
        '206':
          description: Records updated successful partially.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PatchRecordsResponse'
                  - $ref: '#/components/schemas/BulkUpdateRecordsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: User not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /records/{id}:delete:
    post:
      tags:
        - records
      summary: Delete Record
      description: |-
        The API performs a logical deletion of the record using recordId. This operation can be reverted later. 
        Allowed roles: `service.storage.creator` and `service.storage.admin` who is the OWNER of the record.
      operationId: deleteRecord
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Record id
          required: true
          schema:
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
            type: string
          example: tenant1:well:123456789
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Record deleted successfully.
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Record not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /records/delete:
    post:
      tags:
        - records
      summary: Soft delete of multiple records
      description: |-
        The API performs a soft deletion of the given list of records. 
        Required roles: `users.datalake.editors` or `users.datalake.admins` who is the OWNER of the record.
      operationId: bulkDeleteRecords
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              maxItems: 500
              minItems: 0
              type: array
              description: recordIds to be deleted
              items:
                type: string
        required: true
      responses:
        '204':
          description: All records deleted successfully.
        '207':
          description: Some of the records weren't deleted successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteRecordsException'
        '400':
          description: Invalid id format
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /query/records:
    get:
      tags:
        - query
      summary: Get all record from kind
      description: |-
        The API returns a list of all record ids which belong to the specified kind.
        Allowed roles: `service.storage.admin`.
      operationId: getAllRecords
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: cursor
          in: query
          description: Cursor
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Page Size
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: kind
          in: query
          description: Filter Kind
          required: true
          schema:
            type: string
          example: tenant1:public:well:1.0.2
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record Ids retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoreQueryResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Kind or cursor not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
    post:
      tags:
        - query
      summary: Fetch records
      description: |-
        The API fetches multiple records at once.
        Allowed roles: `service.storage.viewer`,`service.storage.creator` and `service.storage.admin`.
      operationId: getRecords
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRecordIds'
        required: true
      responses:
        '200':
          description: Fetch multiple records successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRecordInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /query/records:batch:
    post:
      tags:
        - query
      summary: Fetch multiple records
      description: |-
        The API fetches multiple records at once in the specific {data-partition-id}.The value of {frame-of-reference} indicates whether normalization is applied.
        Required roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.
      operationId: fetchRecords
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
        - name: frame-of-reference
          in: header
          description: This value indicates whether normalization applies, should be either `none` or `units=SI;crs=wgs84;elevation=msl;azimuth=true north;dates=utc;`
          required: true
          schema:
            type: string
          example: units=SI;crs=wgs84;elevation=msl;azimuth=true north;dates=utc;
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiRecordRequest'
        required: true
      responses:
        '200':
          description: Fetch multiple records successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiRecordResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /records/{id}:
    get:
      tags:
        - records
      summary: Get latest record version data
      description: |-
        This API returns the latest version of the given record.
        Allowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.
      operationId: getLatestRecordVersion
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Record id
          required: true
          schema:
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
            type: string
          example: tenant1:well:123456789
        - name: attribute
          in: query
          description: 'Filter attributes to restrict the returned fields of the record.  Usage: data.{record-data-field-name}.'
          required: false
          schema:
            type: array
            items:
              type: string
          example: data.wellName
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record retrieved successfully.
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Record not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
    delete:
      tags:
        - records
      summary: Purge Record
      description: |-
        The API performs the physical deletion of the given record and all of its versions.
         This operation cannot be undone. 
        Allowed roles: `service.storage.admin` who is the OWNER of the record.
      operationId: purgeRecord
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Record id
          required: true
          schema:
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
            type: string
          example: tenant1:well:123456789
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Record purged successfully.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Record not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /records/{id}/{version}:
    get:
      tags:
        - records
      summary: Get Specific record
      description: |-
        The API retrieves the specific version of the given record. 
        Allowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.
      operationId: getSpecificRecordVersion
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Record id
          required: true
          schema:
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
            type: string
          example: tenant1:well:123456789
        - name: version
          in: path
          description: Record version
          required: true
          schema:
            type: integer
            format: int64
          example: 123456789
        - name: attribute
          in: query
          description: 'Filter attributes to restrict the returned fields of the record.  Usage: data.{record-data-field-name}.'
          required: false
          schema:
            type: array
            items:
              type: string
          example: data.wellName
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record retrieved successfully.
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Record id or version not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /records/{id}/versions:
    delete:
      tags:
        - Records
      summary: Purge record versions
      description: "The API for the given record id, performs the permanent physical deletion record versions excluding latest version and any linked records or files if there are any. 
        If 'limit' query parameter is used then it will delete oldest versions defined by 'limit'.
        This operation cannot be undone. Required roles: 'users.datalake.admins' who is the OWNER of the record."
      operationId: Purge record versions
      parameters:
        - name: id
          in: path
          description: Valid record id following "^[\\w\\-\\.]+:[\\w-\\.]+:[\\w\\-\\.\\:\\%]+$" pattern
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Number of oldest record versions to be deleted. Value must not exceed number of record versions (excluding latest version)
          required: true
          schema:
            type: integer
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Record Versions deleted successfully.
        "400":
          description: Validation error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
        "403":
          description: User not authorized to perform the action.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
        "404":
          description: Record not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
        "500":
          description: Unknown Error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppError"
      security:
        - Authorization: []
  /records/versions/{id}:
    get:
      tags:
        - records
      summary: Get record versions
      description: |-
        The API returns a list containing all versions for the given record id. 
        Allowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.
      operationId: getRecordVersions
      parameters:
        - name: x-collaboration
          in: header
          description: x-collaboration
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Record id
          required: true
          schema:
            pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
            type: string
          example: tenant1:well:123456789
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Record versions retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordVersions'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Record id or version not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
      security:
        - Authorization: []
  /liveness_check:
    get:
      tags:
        - health-check-api
      summary: Liveness Check endpoint
      description: For deployment available public `/liveness_check` endpoint verifies the operational status of the Storage Service.
      operationId: livenessCheck
      parameters:
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
        '502':
          description: Bad Gateway
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
        '503':
          description: Service Unavailable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppError'
  /info:
    get:
      tags:
        - info
      summary: Version info
      description: For deployment available public `/info` endpoint, which provides build and git related information.
      operationId: info
      parameters:
        - name: data-partition-id
          in: header
          description: Tenant Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionInfo'
components:
  schemas:
    Acl:
      type: object
      properties:
        viewers:
          type: array
          items:
            type: string
        owners:
          type: array
          items:
            type: string
    Legal:
      required:
        - otherRelevantDataCountries
      type: object
      properties:
        legaltags:
          uniqueItems: true
          type: array
          items:
            type: string
        otherRelevantDataCountries:
          uniqueItems: true
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - compliant
            - incompliant
    Record:
      required:
        - acl
        - data
      type: object
      properties:
        id:
          pattern: ^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$
          type: string
        version:
          type: integer
          format: int64
        kind:
          type: string
        acl:
          $ref: '#/components/schemas/Acl'
        legal:
          $ref: '#/components/schemas/Legal'
        data:
          type: object
          additionalProperties:
            type: object
        ancestry:
          $ref: '#/components/schemas/RecordAncestry'
        meta:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        tags:
          type: object
          additionalProperties:
            type: string
    RecordAncestry:
      type: object
      properties:
        parents:
          uniqueItems: true
          type: array
          items:
            type: string
    AppError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        reason:
          type: string
        message:
          type: string
    CreateUpdateRecordsResponse:
      type: object
      properties:
        recordCount:
          type: integer
          format: int32
        recordIds:
          type: array
          items:
            type: string
        skippedRecordIds:
          type: array
          items:
            type: string
        recordIdVersions:
          type: array
          items:
            type: string
    DeleteRecordsException:
      type: object
      properties:
        cause:
          type: object
          properties:
            stackTrace:
              type: array
              items:
                type: object
                properties:
                  classLoaderName:
                    type: string
                  moduleName:
                    type: string
                  moduleVersion:
                    type: string
                  methodName:
                    type: string
                  fileName:
                    type: string
                  lineNumber:
                    type: integer
                    format: int32
                  nativeMethod:
                    type: boolean
                  className:
                    type: string
            message:
              type: string
            suppressed:
              type: array
              items:
                type: object
                properties:
                  stackTrace:
                    type: array
                    items:
                      type: object
                      properties:
                        classLoaderName:
                          type: string
                        moduleName:
                          type: string
                        moduleVersion:
                          type: string
                        methodName:
                          type: string
                        fileName:
                          type: string
                        lineNumber:
                          type: integer
                          format: int32
                        nativeMethod:
                          type: boolean
                        className:
                          type: string
                  message:
                    type: string
                  localizedMessage:
                    type: string
            localizedMessage:
              type: string
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              nativeMethod:
                type: boolean
              className:
                type: string
        notDeletedRecords:
          type: array
          items:
            $ref: '#/components/schemas/PairStringString'
        message:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    nativeMethod:
                      type: boolean
                    className:
                      type: string
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    PairStringString:
      type: object
      properties:
        value:
          type: string
        key:
          type: string
        left:
          type: string
        right:
          type: string
    MultiRecordIds:
      required:
        - records
      type: object
      properties:
        records:
          maxItems: 100
          minItems: 0
          type: array
          items:
            type: string
        attributes:
          type: array
          items:
            type: string
      description: Record ids
    MultiRecordInfo:
      type: object
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/Record'
        invalidRecords:
          type: array
          items:
            type: string
        retryRecords:
          type: array
          items:
            type: string
    MultiRecordRequest:
      required:
        - records
      type: object
      properties:
        records:
          maxItems: 20
          minItems: 1
          type: array
          items:
            type: string
      description: Record ids
    ConversionStatus:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        errors:
          type: array
          items:
            type: string
    MultiRecordResponse:
      type: object
      properties:
        records:
          type: array
          items:
            type: string
        notFound:
          type: array
          items:
            type: string
        conversionStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ConversionStatus'
    PatchOperation:
      required:
        - value
      type: object
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: array
          items:
            type: string
    RecordBulkUpdateParam:
      required:
        - ops
        - query
      type: object
      properties:
        query:
          $ref: '#/components/schemas/RecordQuery'
        ops:
          type: array
          items:
            $ref: '#/components/schemas/PatchOperation'
      description: Records to be updated
    RecordQuery:
      required:
        - ids
      type: object
      properties:
        ids:
          maxItems: 500
          minItems: 1
          type: array
          items:
            type: string
    BulkUpdateRecordsResponse:
      type: object
      properties:
        recordCount:
          type: integer
          format: int32
        recordIds:
          type: array
          items:
            type: string
        notFoundRecordIds:
          type: array
          items:
            type: string
        unAuthorizedRecordIds:
          type: array
          items:
            type: string
        lockedRecordIds:
          type: array
          items:
            type: string
    JsonPatch:
      type: object
      description: Record patch operations.
    PatchRecordsRequestModel:
      required:
        - ops
        - query
      type: object
      properties:
        query:
          $ref: '#/components/schemas/RecordQueryPatch'
        ops:
          $ref: '#/components/schemas/JsonPatch'
      description: Records to be patched
      example:
        query:
          ids:
            - common:work-product-component--wellLog:123456
        ops:
          - op: remove
            path: /acl/viewers/0
    RecordQueryPatch:
      type: object
      properties:
        ids:
          type: array
          description: List of record ids. Each record id must follow the naming convention {Data-Partition-Id}:{dataset-name}:{record-type}:{version}.
          items:
            type: string
      description: Represents a model for Record Query Patch
      example:
        ids:
          - common:work-product-component--wellLog:123456
    PatchRecordsResponse:
      type: object
      properties:
        recordCount:
          type: integer
          format: int32
        recordIds:
          type: array
          items:
            type: string
        notFoundRecordIds:
          type: array
          items:
            type: string
        failedRecordIds:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
    RecordVersions:
      type: object
      properties:
        recordId:
          type: string
        versions:
          type: array
          items:
            type: integer
            format: int64
    DatastoreQueryResult:
      type: object
      properties:
        cursor:
          type: string
        results:
          type: array
          items:
            type: string
    ConnectedOuterService:
      type: object
      properties:
        name:
          type: string
        version:
          type: string
    VersionInfo:
      type: object
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        version:
          type: string
        buildTime:
          type: string
        branch:
          type: string
        commitId:
          type: string
        commitMessage:
          type: string
        connectedOuterServices:
          type: array
          items:
            $ref: '#/components/schemas/ConnectedOuterService'
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: Authorization

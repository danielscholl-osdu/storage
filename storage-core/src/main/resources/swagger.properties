#Manage common SpringDoc and OpenAPI related properties

#SpringDoc related properties
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.operationsSorter=alpha
springdoc.swagger-ui.doc-expansion=none
springdoc.swagger-ui.path=/swagger
springdoc.swagger-ui.displayOperationId=true
springdoc.api-docs.path=/api-docs

#OpenAPI 3.0 - Storage properties
api.title=Storage Service
api.description=Storage service which handles the metadata ingestion in the OSDU data platform
api.version=2.0.0
api.contact.name=OSDU Data Platform Team
api.contact.email=dps@OSDU.org
api.license.name=Apache 2.0
api.license.url=https://www.apache.org/licenses/LICENSE-2.0.html

#Query API related properties
queryApi.getAllRecords.summary=Get all record from kind
queryApi.getAllRecords.description=The API returns a list of all record ids which belong to the specified kind.\nAllowed roles: `service.storage.admin`.
queryApi.getRecords.summary=Fetch records
queryApi.getRecords.description=The API fetches multiple records at once.\nAllowed roles: `service.storage.viewer`,`service.storage.creator` and `service.storage.admin`.
queryApi.fetchRecords.summary=Fetch multiple records
queryApi.fetchRecords.description=The API fetches multiple records at once in the specific {data-partition-id}.The value of {frame-of-reference} indicates whether normalization is applied.\nRequired roles: `users.datalake.viewers` or `users.datalake.editors` or `users.datalake.admins`.

#Record API related properties
recordApi.createOrUpdateRecords.summary=Create or Update Records
recordApi.createOrUpdateRecords.description=The API represents the main injection mechanism into the Data Ecosystem. \
\nIt allows records creation and/or update.When no record id is provided or when the provided id is not already present in the Data Ecosystem \
then a new record is created. \n If the id is related to an existing record in the Data Ecosystem \
then an update operation takes place and a new version of the record is created.

recordApi.getLatestRecordVersion.summary=Get latest record version data
recordApi.getLatestRecordVersion.description=This API returns the latest version of the given record.\
\nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.

recordApi.purgeRecord.summary=Purge Record
recordApi.purgeRecord.description=The API performs the physical deletion of the given record and all of its versions.\
\n This operation cannot be undone. \
\nAllowed roles: `service.storage.admin` who is the OWNER of the record.

recordApi.deleteRecord.summary=Delete Record
recordApi.deleteRecord.description=The API performs a logical deletion of the record using recordId. This operation can be reverted later. \
\nAllowed roles: `service.storage.creator` and `service.storage.admin` who is the OWNER of the record.

recordApi.bulkDeleteRecords.summary=Soft delete of multiple records
recordApi.bulkDeleteRecords.description=The API performs a soft deletion of the given list of records. \
\nRequired roles: `users.datalake.editors` or `users.datalake.admins` who is the OWNER of the record.

recordApi.getSpecificRecordVersion.summary=Get Specific record
recordApi.getSpecificRecordVersion.description=The API retrieves the specific version of the given record. \
\nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.

recordApi.getRecordVersions.summary=Get record versions
recordApi.getRecordVersions.description=The API returns a list containing all versions for the given record id. \
\nAllowed roles: `service.storage.viewer`, `service.storage.creator` and `service.storage.admin`.

#Update metadata API related properties (logically part of Record API)
patchApi.updateRecordsMetadata.summary=Modify record metadata attributes using patch operations
patchApi.updateRecordsMetadata.description=The API represents the patch update mechanism for records. It allows updating multiple records \
in one request. The currently supported operations are replace, add, and remove for Legal Tags, ACLs, and Tags. \
\nRequired roles: `users.datalake.editors` or `users.datalake.admins`.

#Patch API related properties (logically part of Record API)
patchApi.patchRecords.summary=Modify record data and/or metadata attributes using patch operations
patchApi.patchRecords.description=The API represents the patch update mechanism for records. It allows updating multiple records in one request. The API supports \
metadata update only (Legal Tags, ACLs and Tags) if the request body media type is `application/json`. The API supports metadata and data update (Legal Tags, ACLs, Tags, Ancestry, Kind, Meta and Data) \
if the request body media type is `application/json-patch+json`. Please choose the appropriate media type from the Request body dropdown. The currently supported operations are replace, add, and remove. \
\nRequired roles: `users.datalake.editors` or `users.datalake.admins`.

#Info & Health API related properties
infoApi.info.summary=Version info
infoApi.info.description=For deployment available public `/info` endpoint, which provides build and git related information.
healthCheckApi.livenessCheck.summary=Liveness Check endpoint
healthCheckApi.livenessCheck.description=For deployment available public `/liveness_check` endpoint verifies the operational status of the Storage Service.
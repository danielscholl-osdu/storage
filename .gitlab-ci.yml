variables:
  AWS_BUILD_SUBDIR: provider/storage-aws/build-aws
  AWS_TEST_SUBDIR: testing/storage-test-aws
  AWS_SERVICE: storage
  AWS_ENVIRONMENT: dev
  AWS_DEPLOY_TARGET: EKS
  AWS_EKS_DEPLOYMENT_NAME: os-storage

  AWS_MONGODB_BUILD_SUBDIR: provider/storage-aws-mongodb/build-aws
  AWS_MONGODB_TEST_SUBDIR: testing/storage-test-aws-mongodb
  AWS_MONGODB_SERVICE: storage
  AWS_MONGODB_ENVIRONMENT: dev
  AWS_MONGODB_SKIP_TESTS: 'true'

  GCP_BUILD_SUBDIR: provider/storage-gcp
  GCP_INT_TEST_SUBDIR: testing/storage-test-gcp
  GCP_APPLICATION_NAME: os-storage
  GCP_ENVIRONMENT: testing
  GCP_PROJECT: opendes-evt
  GCP_TENANT_NAME: opendesevt
  GCP_DEPLOY_ENV: p4d

  OSDU_GCP_ENVIRONMENT: osdu-gcp
  # --- osdu gcp specific variables for cloudrun ---
  OSDU_GCP_SERVICE: storage
  OSDU_GCP_VENDOR: gcp
  OSDU_GCP_APPLICATION_NAME: os-storage
  OSDU_GCP_DEFAULT_DATA_COUNTRY: US
  # --- osdu specific variables for cloudrun storage w/o "/" at the end ---
  OSDU_GCP_ENV_VARS: GOOGLE_AUDIENCES=$GOOGLE_AUDIENCE,AUTHORIZE_API=$OSDU_GCP_ENTITLEMENTS_V2_URL,LEGALTAG_API=$OSDU_GCP_LEGALTAG_API,STORAGE_HOSTNAME=$OSDU_GCP_STORAGE_HOSTNAME,CRS_API=$OSDU_GCP_CRS_API,DEFAULT_DATA_COUNTRY=$OSDU_GCP_DEFAULT_DATA_COUNTRY,REDIS_STORAGE_HOST=$REDIS_STORAGE_HOST,REDIS_GROUP_HOST=$REDIS_GROUP_HOST,PARTITION_API=$OSDU_GCP_PARTITION_API,POLICY_API=$OSDU_GCP_POLICY_API,POLICY_ID=storage --vpc-connector=$OSDU_GCP_VPC_CONNECTOR
  OSDU_GCP_TEST_SUBDIR: testing/$OSDU_GCP_SERVICE-test-$OSDU_GCP_VENDOR
  OSDU_GCP_HELM_PACKAGE_CHARTS: "devops/gcp/deploy devops/gcp/configmap"
  # --- osdu specific variables for GKE ---
  OSDU_GCP_HELM_CONFIG_SERVICE_VARS: "--set data.google_audiences=$GOOGLE_AUDIENCE --set data.redis_group_host=$REDIS_GROUP_HOST --set data.redis_storage_host=$REDIS_STORAGE_HOST --set data.crs_api=$OSDU_GCP_CRS_API --set data.storage_hostname=$OSDU_GCP_SERVICE"
  OSDU_GCP_HELM_DEPLOYMENT_SERVICE_VARS: "--set data.image=$CI_REGISTRY_IMAGE/osdu-gcp:$CI_COMMIT_SHORT_SHA --set data.serviceAccountName=workload-identity-storage --set data.limits_cpu=1.5 --set data.limits_memory=2048M"
  OSDU_GCP_HELM_CONFIG_SERVICE: storage-config
  OSDU_GCP_HELM_DEPLOYMENT_SERVICE: storage-deploy

  AZURE_SERVICE: storage
  AZURE_BUILD_SUBDIR: provider/storage-azure
  AZURE_TEST_SUBDIR: testing/storage-test-azure

  IBM_BUILD_SUBDIR: provider/storage-ibm
  IBM_INT_TEST_SUBDIR: testing/storage-test-ibm
  IBM_TENANT_NAME: tenant1

include:
  - project: "osdu/platform/ci-cd-pipelines"
    file: "standard-setup.yml"

  - project: "osdu/platform/ci-cd-pipelines"
    file: "build/maven.yml"

fossa-analyze:
  extends: .maven
  image: $CI_REGISTRY/divido/fossa-with-cache:latest
  stage: scan
  needs: ['compile-and-unit-test']
  tags: ['osdu-medium']
  rules:
    - if: $FOSSA_API_KEY

  script:
    # fossa-check-for-licensing-issues needs a CI_COMMIT_BRANCH defined to know how to parse the FOSSA API results
    # When building tags, this isn't defined by GitLab. In that case, we use the tag name instead. If that's not defined
    # then things will fail and we'll have to make this smarter
    - test -z "$CI_COMMIT_BRANCH" && export CI_COMMIT_BRANCH="$CI_COMMIT_TAG"

    - $MAVEN_FOREACH maven-fossa-output.txt install --update-snapshots -DskipTests=true
    - cp "$CI_PROJECT_DIR/.mvn/community-maven.settings.xml" ~/.m2/settings.xml

    - fossa-with-cache
